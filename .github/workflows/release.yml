name: Release

on:
  workflow_dispatch:

env:
  FLUTTER_VERSION: "3.22.2"
  CACHE_KEY: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
  APP_NAME: "Atonement"

jobs:
  build:
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - uses: actions/checkout@v3

      - name: Get version from pubspec.yaml
        id: get_version
        run: |
          VERSION=$(sed -n 's/^version: \([0-9]*\.[0-9]*\.[0-9]*\).*/\1/p' pubspec.yaml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-key: ${{ env.CACHE_KEY }}
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Dependencies
        run: flutter pub get

      - name: Build generated files
        run: dart run build_runner build -d lib

      - name: Upload updated lib files with generated code
        uses: actions/upload-artifact@v3
        with:
          name: lib-files
          path: ./lib/*

  build_ipa:
    needs: build
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Download generated files
        uses: actions/download-artifact@v3
        with:
          name: lib-files
          path: lib

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-key: ${{ env.CACHE_KEY }}
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Build iOS
        run: |
          flutter build ios --release
          cd build/ios/iphoneos
          mkdir Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r app.ipa Payload

      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
          name: ipa-result
          path: build/ios/iphoneos/app.ipa

    build_macos:
      needs: build
      runs-on: macos-latest

      steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Install the Apple certificate and provisioning profile
          env:
            BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
            P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
            MAC_BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MAC_BUILD_PROVISION_PROFILE_BASE64 }}
            KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          run: |
            # create variables
            CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
            PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
            KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

            # import certificate and provisioning profile from secrets
            echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
            echo -n "$MAC_BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

            # create temporary keychain
            security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

            # import certificate to keychain
            security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
            security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            security list-keychain -d user -s $KEYCHAIN_PATH

            # apply provisioning profile
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

        - name: Download generated files
          uses: actions/download-artifact@v3
          with:
            name: lib-files
            path: lib

        - name: Install Flutter
          uses: subosito/flutter-action@v2
          with:
            flutter-version: ${{ env.FLUTTER_VERSION }}
            cache: true
            cache-key: ${{ env.CACHE_KEY }}
            cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

        - name: Build macOS
          run: flutter build macos --release

        - name: Upload macOS
          uses: actions/upload-artifact@v3
          with:
            name: macos-result
            path: build/macos/Build/Products/Release/*.app

  build_apk:
    needs: build
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download generated files
        uses: actions/download-artifact@v3
        with:
          name: lib-files
          path: lib

      #      - name: Decode key.properties file
      #        env:
      #          ENCODED_STRING: ${{ secrets.ANDROID_KEY_PROPERTIES }}
      #        run: echo $ENCODED_STRING | base64 -di > android/key.properties
      #
      #      - name: Decode android-keystore.jks file
      #        env:
      #          ENCODED_STRING: ${{ secrets.ANDROID_KEY_STORE }}
      #        run: mkdir secrets && echo $ENCODED_STRING | base64 -di > secrets/android-keystore.jks

      - name: Set up JDK 18
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '18.x'
          cache: 'gradle'

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-key: ${{ env.CACHE_KEY }}
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Build APK
        run: |
          flutter build apk --split-per-abi

      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: apk-result
          path: build/app/outputs/flutter-apk/*.apk

  build_windows_zip:
    needs: build
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download generated files
        uses: actions/download-artifact@v3
        with:
          name: lib-files
          path: lib

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-key: ${{ env.CACHE_KEY }}
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Compile for Windows
        run: flutter build windows

      - name: Zip compiled files
        run: Compress-Archive -Path build/windows/x64/runner/Release/* -DestinationPath App.zip

      - name: Upload zip
        uses: actions/upload-artifact@v3
        with:
          name: windows-zip-result
          path: App.zip

  release:
    needs: [ build, build_apk, build_windows_zip, build_ipa, build_macos ]
    runs-on: ubuntu-20.04
    env:
      VERSION: ${{ needs.build.outputs.version }}

    steps:
      - uses: actions/checkout@v3

      # IPA
      - name: Download ipa
        uses: actions/download-artifact@v3
        with:
          name: ipa-result
          path: ipa-result

      - name: Rename ipa
        run: mv ipa-result/*.ipa ipa-result/${{ env.APP_NAME }}-${{ env.VERSION }}.ipa

      # MACOS
      - name: Download macos
        uses: actions/download-artifact@v3
        with:
          name: macos-result
          path: macos-result

      - name: Rename macos
        run: mv macos-result/*.app macos-result/${{ env.APP_NAME }}-${{ env.VERSION }}-macos.app

      # APK
      - name: Download apk file
        uses: actions/download-artifact@v3
        with:
          name: apk-result
          path: apk-result

      # WINDOWS ZIP
      - name: Download windows zip file
        uses: actions/download-artifact@v3
        with:
          name: windows-zip-result
          path: windows-zip-result
      - name: Rename windows
        run: mv windows-zip-result/*.zip windows-zip-result/${{ env.APP_NAME }}-${{ env.VERSION }}-windows-x64.zip

      - name: Push to Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "windows-zip-result/*.zip, apk-result/*.apk, ipa-result/*.ipa, macos-result/*.app"
          token: ${{ secrets.WORKFLOW_TOKEN }}
          tag: v${{ env.VERSION }}
          name: v${{ env.VERSION }}